NET Architectural Components
https://docs.microsoft.com/en-us/dotnet/standard/components
Types:
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/
	C# is a strongly-typed language
	
Reference Type and Value Types
http://net-informations.com/faq/general/valuetype-referencetype.htm
http://net-informations.com/faq/net/stack-heap.htm

Every type is a value type or reference type
o Use struct to create a value type
o Use class to create a reference type

Value types are usually immutable
o Can not change the value of 4
o Can not change the value of August 9th, 2002

§ Arrays and strings are reference types
o Strings behave like a value type

Anonymous Types
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/anonymous-types

Other:
https://stackoverflow.com/questions/31859016/is-the-use-of-dynamic-considered-a-bad-practice
http://www.dotnettricks.com/learn/csharp/understanding-boxing-and-unboxing-in-csharp
http://www.dotnettricks.com/learn/csharp/difference-between-constant-and-readonly-and-static
http://www.c-sharpcorner.com/UploadFile/c210df/difference-between-const-readonly-and-static-readonly-in-C-Sharp/
http://geekswithblogs.net/BlackRabbitCoder/archive/2010/07/29/c-fundamentals-the-differences-between-struct-and-class.aspx
https://www.codeproject.com/Articles/1456/Enums-and-Structs-in-C

Unboxing is converting a value type to a reference type. Casting is converting a reference type to a reference type or a value type as another value type.
int i = 0;
object o = (object)i; //this is boxing
int i2 = (int)o; //this is unboxing.
long l = (long)i; //this is casting.

Practice:
Task: Read File.
We have: class Employee(FirstName,Surname,EmailAddress)
You need:
+ read employee.txt file
+ map each row to an employee
+ display all employees on the screen.


For example Employee.txt data:
FirstName:Anton | Surname:Balaz | EmailAddress:anton.solictor@example.com
FirstName:Anton | Surname:Unverified | EmailAddress:Anton.unverified@example.com
FirstName:Arnold | Surname:Dvstest | EmailAddress:arnold.accountant@example.com
FirstName:Barbara | Surname:Petzold | EmailAddress:barbara.guarantor@example.com
FirstName:Barbara | Surname:Santa | EmailAddress:barbara.tenant@example.com
FirstName:Big | Surname:Admin | EmailAddress:BigAdmin@example.com
FirstName:Charmaine | Surname:Sheh | EmailAddress:charmaine.delegate@example.com
FirstName:Charmaine | Surname:Sinatra | EmailAddress:charmaine.tenant@example.com
FirstName:Hamish | Surname:Leighton | EmailAddress:Hamish.Director@example.com
FirstName:Joel | Surname:Coen | EmailAddress:joel.guarantor@example.com
FirstName:Mike | Surname:Quill | EmailAddress:mike.director@example.com
FirstName:Nelly | Surname:Sachs | EmailAddress:Nelly.Sachs@example.com
FirstName:Sean | Surname:Paul | EmailAddress:Sean.Landlord@example.com
FirstName:Shaun | Surname:Daly | EmailAddress:shaun.solicitor@example.com

Refer:
http://cc.davelozinski.com/c-sharp/fastest-way-to-read-text-files
http://cc.davelozinski.com/c-sharp/the-fastest-way-to-read-and-process-text-files

File.ReadAllLines(filePath);
Console.WriteLine(File.Exists(curFile) ? "File exists." : "File does not exist.");